// app/[lnaddress]/page.tsx
// THIS IS THE SERVER COMPONENT

import PaydeskClient from './paydesk-client'; // Import the client component

// This function is required for "output: 'export'"
// It tells Next.js which dynamic paths to pre-build during `next build`.
export async function generateStaticParams() {
  // --- IMPORTANT ---
  // Replace this with your actual logic to fetch a list
  // of all the lightning addresses you want to pre-build.
  // For demonstration, let's use hardcoded values as discussed.
  const allKnownLnAddresses = [
    'user1@example.com',
    'test@domain.com',
    'merchant@store.com',
    // Add all other Lightning Addresses you need to pre-render
  ];

  // This returns an array of objects, where each object has a key
  // that matches your dynamic segment name (`lnaddress`).
  return allKnownLnAddresses.map((address) => ({
    lnaddress: address,
  }));
}

// This is your Server Component for the dynamic route.
// It receives the dynamic segment value (`lnaddress`) via the `params` prop.
export default function PaydeskPage({ params }: { params: { lnaddress: string } }) {
  const { lnaddress } = params;

  // The `lnaddress` received here is one of the values generated by `generateStaticParams()`.
  // We decode it here if necessary, though it's often handled in the client component
  // if you prefer to keep the `decodeURIComponent` logic with the client-side use.
  // For static generation, the URL is already decoded by the time it reaches `params`.
  const decodedLnaddress = decodeURIComponent(lnaddress);

  // Render the Client Component and pass the decodedLnaddress to it as a prop.
  // This is how data flows from Server to Client Components.
  return <PaydeskClient lnaddress={decodedLnaddress} />;
}